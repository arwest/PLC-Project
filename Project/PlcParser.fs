// Implementation file for parser generated by fsyacc
module PlcParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "PlcParser.fsy"

 open Absyn
 open ParAux

# 11 "PlcParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | HASH
  | COMMA
  | COLON
  | SEMIC
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | EQ
  | NEQ
  | LT
  | LTE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | PRINT
  | CONS
  | HEAD
  | TAIL
  | ISE
  | NOT
  | AND
  | IF
  | THEN
  | ELSE
  | VAR
  | FUN
  | REC
  | DARROW
  | FN
  | END
  | UNIT
  | BOOL
  | INT
  | LIST
  | TUPLE
  | ARROW
  | CSTBOOL of (bool)
  | NAME of (string)
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_HASH
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMIC
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_LT
    | TOKEN_LTE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PRINT
    | TOKEN_CONS
    | TOKEN_HEAD
    | TOKEN_TAIL
    | TOKEN_ISE
    | TOKEN_NOT
    | TOKEN_AND
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_VAR
    | TOKEN_FUN
    | TOKEN_REC
    | TOKEN_DARROW
    | TOKEN_FN
    | TOKEN_END
    | TOKEN_UNIT
    | TOKEN_BOOL
    | TOKEN_INT
    | TOKEN_LIST
    | TOKEN_TUPLE
    | TOKEN_ARROW
    | TOKEN_CSTBOOL
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Decl
    | NONTERM_Expr
    | NONTERM_AtExpr
    | NONTERM_AppExpr
    | NONTERM_Const
    | NONTERM_Comps
    | NONTERM_Args
    | NONTERM_Params
    | NONTERM_TypedVar
    | NONTERM_Type
    | NONTERM_AtType
    | NONTERM_Types

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | HASH  -> 1 
  | COMMA  -> 2 
  | COLON  -> 3 
  | SEMIC  -> 4 
  | LPAR  -> 5 
  | RPAR  -> 6 
  | LBRACE  -> 7 
  | RBRACE  -> 8 
  | LBRACK  -> 9 
  | RBRACK  -> 10 
  | EQ  -> 11 
  | NEQ  -> 12 
  | LT  -> 13 
  | LTE  -> 14 
  | PLUS  -> 15 
  | MINUS  -> 16 
  | TIMES  -> 17 
  | DIV  -> 18 
  | PRINT  -> 19 
  | CONS  -> 20 
  | HEAD  -> 21 
  | TAIL  -> 22 
  | ISE  -> 23 
  | NOT  -> 24 
  | AND  -> 25 
  | IF  -> 26 
  | THEN  -> 27 
  | ELSE  -> 28 
  | VAR  -> 29 
  | FUN  -> 30 
  | REC  -> 31 
  | DARROW  -> 32 
  | FN  -> 33 
  | END  -> 34 
  | UNIT  -> 35 
  | BOOL  -> 36 
  | INT  -> 37 
  | LIST  -> 38 
  | TUPLE  -> 39 
  | ARROW  -> 40 
  | CSTBOOL _ -> 41 
  | NAME _ -> 42 
  | CSTINT _ -> 43 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_HASH 
  | 2 -> TOKEN_COMMA 
  | 3 -> TOKEN_COLON 
  | 4 -> TOKEN_SEMIC 
  | 5 -> TOKEN_LPAR 
  | 6 -> TOKEN_RPAR 
  | 7 -> TOKEN_LBRACE 
  | 8 -> TOKEN_RBRACE 
  | 9 -> TOKEN_LBRACK 
  | 10 -> TOKEN_RBRACK 
  | 11 -> TOKEN_EQ 
  | 12 -> TOKEN_NEQ 
  | 13 -> TOKEN_LT 
  | 14 -> TOKEN_LTE 
  | 15 -> TOKEN_PLUS 
  | 16 -> TOKEN_MINUS 
  | 17 -> TOKEN_TIMES 
  | 18 -> TOKEN_DIV 
  | 19 -> TOKEN_PRINT 
  | 20 -> TOKEN_CONS 
  | 21 -> TOKEN_HEAD 
  | 22 -> TOKEN_TAIL 
  | 23 -> TOKEN_ISE 
  | 24 -> TOKEN_NOT 
  | 25 -> TOKEN_AND 
  | 26 -> TOKEN_IF 
  | 27 -> TOKEN_THEN 
  | 28 -> TOKEN_ELSE 
  | 29 -> TOKEN_VAR 
  | 30 -> TOKEN_FUN 
  | 31 -> TOKEN_REC 
  | 32 -> TOKEN_DARROW 
  | 33 -> TOKEN_FN 
  | 34 -> TOKEN_END 
  | 35 -> TOKEN_UNIT 
  | 36 -> TOKEN_BOOL 
  | 37 -> TOKEN_INT 
  | 38 -> TOKEN_LIST 
  | 39 -> TOKEN_TUPLE 
  | 40 -> TOKEN_ARROW 
  | 41 -> TOKEN_CSTBOOL 
  | 42 -> TOKEN_NAME 
  | 43 -> TOKEN_CSTINT 
  | 46 -> TOKEN_end_of_input
  | 44 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Decl 
    | 3 -> NONTERM_Decl 
    | 4 -> NONTERM_Decl 
    | 5 -> NONTERM_Decl 
    | 6 -> NONTERM_Expr 
    | 7 -> NONTERM_Expr 
    | 8 -> NONTERM_Expr 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_Expr 
    | 21 -> NONTERM_Expr 
    | 22 -> NONTERM_Expr 
    | 23 -> NONTERM_Expr 
    | 24 -> NONTERM_Expr 
    | 25 -> NONTERM_Expr 
    | 26 -> NONTERM_Expr 
    | 27 -> NONTERM_AtExpr 
    | 28 -> NONTERM_AtExpr 
    | 29 -> NONTERM_AtExpr 
    | 30 -> NONTERM_AtExpr 
    | 31 -> NONTERM_AtExpr 
    | 32 -> NONTERM_AtExpr 
    | 33 -> NONTERM_AppExpr 
    | 34 -> NONTERM_AppExpr 
    | 35 -> NONTERM_Const 
    | 36 -> NONTERM_Const 
    | 37 -> NONTERM_Const 
    | 38 -> NONTERM_Const 
    | 39 -> NONTERM_Comps 
    | 40 -> NONTERM_Comps 
    | 41 -> NONTERM_Args 
    | 42 -> NONTERM_Args 
    | 43 -> NONTERM_Params 
    | 44 -> NONTERM_Params 
    | 45 -> NONTERM_TypedVar 
    | 46 -> NONTERM_Type 
    | 47 -> NONTERM_Type 
    | 48 -> NONTERM_Type 
    | 49 -> NONTERM_Type 
    | 50 -> NONTERM_AtType 
    | 51 -> NONTERM_AtType 
    | 52 -> NONTERM_AtType 
    | 53 -> NONTERM_AtType 
    | 54 -> NONTERM_Types 
    | 55 -> NONTERM_Types 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 46 
let _fsyacc_tagOfErrorTerminal = 44

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | HASH  -> "HASH" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | SEMIC  -> "SEMIC" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | LT  -> "LT" 
  | LTE  -> "LTE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PRINT  -> "PRINT" 
  | CONS  -> "CONS" 
  | HEAD  -> "HEAD" 
  | TAIL  -> "TAIL" 
  | ISE  -> "ISE" 
  | NOT  -> "NOT" 
  | AND  -> "AND" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | VAR  -> "VAR" 
  | FUN  -> "FUN" 
  | REC  -> "REC" 
  | DARROW  -> "DARROW" 
  | FN  -> "FN" 
  | END  -> "END" 
  | UNIT  -> "UNIT" 
  | BOOL  -> "BOOL" 
  | INT  -> "INT" 
  | LIST  -> "LIST" 
  | TUPLE  -> "TUPLE" 
  | ARROW  -> "ARROW" 
  | CSTBOOL _ -> "CSTBOOL" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | HASH  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMIC  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LTE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | CONS  -> (null : System.Object) 
  | HEAD  -> (null : System.Object) 
  | TAIL  -> (null : System.Object) 
  | ISE  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | DARROW  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | UNIT  -> (null : System.Object) 
  | BOOL  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | LIST  -> (null : System.Object) 
  | TUPLE  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 5us; 65535us; 0us; 2us; 9us; 10us; 16us; 17us; 25us; 26us; 76us; 77us; 31us; 65535us; 0us; 4us; 7us; 8us; 9us; 3us; 14us; 15us; 16us; 3us; 23us; 24us; 25us; 3us; 29us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 61us; 47us; 62us; 48us; 63us; 49us; 64us; 50us; 65us; 51us; 66us; 52us; 67us; 53us; 68us; 54us; 69us; 55us; 70us; 56us; 71us; 57us; 76us; 4us; 79us; 58us; 85us; 59us; 97us; 60us; 33us; 65535us; 0us; 27us; 7us; 27us; 9us; 27us; 14us; 27us; 16us; 27us; 23us; 27us; 25us; 27us; 27us; 87us; 28us; 88us; 29us; 27us; 31us; 27us; 33us; 27us; 35us; 27us; 37us; 27us; 39us; 27us; 41us; 27us; 43us; 27us; 45us; 27us; 61us; 27us; 62us; 27us; 63us; 27us; 64us; 27us; 65us; 27us; 66us; 27us; 67us; 27us; 68us; 27us; 69us; 27us; 70us; 27us; 71us; 27us; 76us; 27us; 79us; 27us; 85us; 27us; 97us; 27us; 31us; 65535us; 0us; 28us; 7us; 28us; 9us; 28us; 14us; 28us; 16us; 28us; 23us; 28us; 25us; 28us; 29us; 28us; 31us; 28us; 33us; 28us; 35us; 28us; 37us; 28us; 39us; 28us; 41us; 28us; 43us; 28us; 45us; 28us; 61us; 28us; 62us; 28us; 63us; 28us; 64us; 28us; 65us; 28us; 66us; 28us; 67us; 28us; 68us; 28us; 69us; 28us; 70us; 28us; 71us; 28us; 76us; 28us; 79us; 28us; 85us; 28us; 97us; 28us; 33us; 65535us; 0us; 74us; 7us; 74us; 9us; 74us; 14us; 74us; 16us; 74us; 23us; 74us; 25us; 74us; 27us; 74us; 28us; 74us; 29us; 74us; 31us; 74us; 33us; 74us; 35us; 74us; 37us; 74us; 39us; 74us; 41us; 74us; 43us; 74us; 45us; 74us; 61us; 74us; 62us; 74us; 63us; 74us; 64us; 74us; 65us; 74us; 66us; 74us; 67us; 74us; 68us; 74us; 69us; 74us; 70us; 74us; 71us; 74us; 76us; 74us; 79us; 74us; 85us; 74us; 97us; 74us; 2us; 65535us; 79us; 81us; 97us; 98us; 3us; 65535us; 12us; 13us; 19us; 20us; 83us; 84us; 2us; 65535us; 99us; 101us; 104us; 105us; 2us; 65535us; 99us; 103us; 104us; 103us; 8us; 65535us; 21us; 22us; 94us; 95us; 107us; 108us; 111us; 121us; 115us; 116us; 122us; 118us; 126us; 119us; 128us; 120us; 8us; 65535us; 21us; 109us; 94us; 109us; 107us; 109us; 111us; 109us; 115us; 109us; 122us; 109us; 126us; 109us; 128us; 109us; 2us; 65535us; 111us; 112us; 128us; 129us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 9us; 41us; 75us; 107us; 141us; 144us; 148us; 151us; 154us; 163us; 172us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 14us; 2us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 25us; 26us; 13us; 2us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 1us; 3us; 1us; 3us; 1us; 3us; 13us; 3us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 2us; 3us; 25us; 1us; 3us; 2us; 4us; 5us; 1us; 4us; 1us; 4us; 1us; 4us; 13us; 4us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 2us; 4us; 25us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 2us; 5us; 49us; 1us; 5us; 13us; 5us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 2us; 5us; 25us; 1us; 5us; 2us; 6us; 33us; 2us; 7us; 34us; 1us; 8us; 13us; 8us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 1us; 8us; 13us; 8us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 1us; 8us; 13us; 8us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 1us; 9us; 13us; 9us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 1us; 10us; 13us; 10us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 1us; 11us; 13us; 11us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 1us; 12us; 13us; 12us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 1us; 13us; 13us; 13us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 1us; 14us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 13us; 15us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 13us; 15us; 16us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 13us; 15us; 16us; 17us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 13us; 15us; 16us; 17us; 18us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 13us; 15us; 16us; 17us; 18us; 19us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 13us; 15us; 16us; 17us; 18us; 19us; 20us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 13us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 21us; 22us; 23us; 24us; 25us; 26us; 13us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 22us; 23us; 24us; 25us; 26us; 13us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 23us; 24us; 25us; 26us; 13us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 24us; 25us; 26us; 13us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 25us; 26us; 15us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 30us; 39us; 40us; 13us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 32us; 15us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 39us; 39us; 40us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 28us; 1us; 29us; 1us; 29us; 1us; 29us; 4us; 30us; 31us; 37us; 38us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 38us; 1us; 38us; 2us; 38us; 49us; 1us; 38us; 2us; 39us; 40us; 1us; 40us; 2us; 41us; 42us; 1us; 41us; 1us; 42us; 1us; 42us; 2us; 43us; 44us; 1us; 44us; 1us; 44us; 1us; 45us; 1us; 45us; 2us; 45us; 49us; 1us; 46us; 1us; 47us; 1us; 47us; 1us; 47us; 1us; 47us; 1us; 48us; 1us; 48us; 2us; 48us; 49us; 1us; 48us; 2us; 49us; 49us; 2us; 49us; 53us; 4us; 49us; 54us; 54us; 55us; 3us; 49us; 54us; 55us; 1us; 49us; 1us; 50us; 1us; 51us; 1us; 52us; 1us; 53us; 1us; 53us; 2us; 54us; 55us; 1us; 55us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 21us; 35us; 37us; 39us; 41us; 55us; 58us; 60us; 63us; 65us; 67us; 69us; 83us; 86us; 88us; 90us; 92us; 94us; 96us; 99us; 101us; 115us; 118us; 120us; 123us; 126us; 128us; 142us; 144us; 158us; 160us; 174us; 176us; 190us; 192us; 206us; 208us; 222us; 224us; 238us; 240us; 254us; 256us; 270us; 284us; 298us; 312us; 326us; 340us; 354us; 368us; 382us; 396us; 410us; 424us; 440us; 454us; 470us; 472us; 474us; 476us; 478us; 480us; 482us; 484us; 486us; 488us; 490us; 492us; 494us; 496us; 498us; 500us; 502us; 504us; 506us; 511us; 513us; 515us; 517us; 519us; 521us; 523us; 525us; 527us; 529us; 531us; 533us; 535us; 537us; 539us; 541us; 544us; 546us; 549us; 551us; 554us; 556us; 558us; 560us; 563us; 565us; 567us; 569us; 571us; 574us; 576us; 578us; 580us; 582us; 584us; 586us; 588us; 591us; 593us; 596us; 599us; 604us; 608us; 610us; 612us; 614us; 616us; 618us; 620us; 623us; |]
let _fsyacc_action_rows = 130
let _fsyacc_actionTableElements = [|15us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 29us; 5us; 30us; 11us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 0us; 49152us; 0us; 16385us; 12us; 16386us; 1us; 72us; 4us; 71us; 11us; 65us; 12us; 66us; 13us; 68us; 14us; 69us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 67us; 12us; 16386us; 1us; 72us; 4us; 71us; 11us; 65us; 12us; 66us; 13us; 68us; 14us; 69us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 67us; 1us; 32768us; 42us; 6us; 1us; 32768us; 11us; 7us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 12us; 32768us; 1us; 72us; 4us; 9us; 11us; 65us; 12us; 66us; 13us; 68us; 14us; 69us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 67us; 15us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 29us; 5us; 30us; 11us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 0us; 16387us; 2us; 32768us; 31us; 18us; 42us; 12us; 1us; 32768us; 5us; 99us; 1us; 32768us; 11us; 14us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 12us; 32768us; 1us; 72us; 4us; 16us; 11us; 65us; 12us; 66us; 13us; 68us; 14us; 69us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 67us; 15us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 29us; 5us; 30us; 11us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 0us; 16388us; 1us; 32768us; 42us; 19us; 1us; 32768us; 5us; 99us; 1us; 32768us; 3us; 21us; 6us; 32768us; 5us; 126us; 35us; 123us; 36us; 124us; 37us; 125us; 38us; 114us; 39us; 110us; 2us; 32768us; 11us; 23us; 40us; 122us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 12us; 32768us; 1us; 72us; 4us; 25us; 11us; 65us; 12us; 66us; 13us; 68us; 14us; 69us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 67us; 15us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 29us; 5us; 30us; 11us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 0us; 16389us; 6us; 16390us; 5us; 79us; 7us; 76us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 6us; 16391us; 5us; 79us; 7us; 76us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 13us; 32768us; 1us; 72us; 4us; 71us; 11us; 65us; 12us; 66us; 13us; 68us; 14us; 69us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 67us; 27us; 31us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 13us; 32768us; 1us; 72us; 4us; 71us; 11us; 65us; 12us; 66us; 13us; 68us; 14us; 69us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 67us; 28us; 33us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 11us; 16392us; 1us; 72us; 11us; 65us; 12us; 66us; 13us; 68us; 14us; 69us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 67us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 1us; 16393us; 1us; 72us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 4us; 16394us; 1us; 72us; 17us; 63us; 18us; 64us; 25us; 67us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 1us; 16395us; 1us; 72us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 1us; 16396us; 1us; 72us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 1us; 16397us; 1us; 72us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 1us; 16398us; 1us; 72us; 4us; 16399us; 1us; 72us; 17us; 63us; 18us; 64us; 25us; 67us; 4us; 16400us; 1us; 72us; 17us; 63us; 18us; 64us; 25us; 67us; 1us; 16401us; 1us; 72us; 1us; 16402us; 1us; 72us; 9us; 16403us; 1us; 72us; 13us; 68us; 14us; 69us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 67us; 9us; 16404us; 1us; 72us; 13us; 68us; 14us; 69us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 67us; 1us; 16405us; 1us; 72us; 7us; 16406us; 1us; 72us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 67us; 7us; 16407us; 1us; 72us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 67us; 7us; 16408us; 1us; 72us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 67us; 12us; 16409us; 1us; 72us; 4us; 71us; 11us; 65us; 12us; 66us; 13us; 68us; 14us; 69us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 67us; 14us; 32768us; 1us; 72us; 2us; 97us; 4us; 71us; 6us; 80us; 11us; 65us; 12us; 66us; 13us; 68us; 14us; 69us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 67us; 13us; 32768us; 1us; 72us; 4us; 71us; 11us; 65us; 12us; 66us; 13us; 68us; 14us; 69us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 67us; 34us; 86us; 13us; 16423us; 1us; 72us; 2us; 97us; 4us; 71us; 11us; 65us; 12us; 66us; 13us; 68us; 14us; 69us; 15us; 61us; 16us; 62us; 17us; 63us; 18us; 64us; 20us; 70us; 25us; 67us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 1us; 32768us; 43us; 73us; 0us; 16410us; 0us; 16411us; 0us; 16412us; 15us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 29us; 5us; 30us; 11us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 1us; 32768us; 8us; 78us; 0us; 16413us; 15us; 32768us; 5us; 79us; 6us; 91us; 7us; 76us; 9us; 92us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 0us; 16414us; 1us; 32768us; 6us; 82us; 0us; 16415us; 1us; 32768us; 5us; 99us; 1us; 32768us; 32us; 85us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 0us; 16420us; 0us; 16421us; 1us; 32768us; 10us; 93us; 1us; 32768us; 3us; 94us; 6us; 32768us; 5us; 126us; 35us; 123us; 36us; 124us; 37us; 125us; 38us; 114us; 39us; 110us; 2us; 32768us; 6us; 96us; 40us; 122us; 0us; 16422us; 13us; 32768us; 5us; 79us; 7us; 76us; 16us; 37us; 19us; 45us; 21us; 39us; 22us; 41us; 23us; 43us; 24us; 35us; 26us; 29us; 33us; 83us; 41us; 89us; 42us; 75us; 43us; 90us; 0us; 16424us; 2us; 32768us; 6us; 100us; 42us; 106us; 0us; 16425us; 1us; 32768us; 6us; 102us; 0us; 16426us; 1us; 16427us; 2us; 104us; 1us; 32768us; 42us; 106us; 0us; 16428us; 1us; 32768us; 3us; 107us; 6us; 32768us; 5us; 126us; 35us; 123us; 36us; 124us; 37us; 125us; 38us; 114us; 39us; 110us; 1us; 16429us; 40us; 122us; 0us; 16430us; 1us; 32768us; 9us; 111us; 6us; 32768us; 5us; 126us; 35us; 123us; 36us; 124us; 37us; 125us; 38us; 114us; 39us; 110us; 1us; 32768us; 10us; 113us; 0us; 16431us; 1us; 32768us; 9us; 115us; 6us; 32768us; 5us; 126us; 35us; 123us; 36us; 124us; 37us; 125us; 38us; 114us; 39us; 110us; 2us; 32768us; 10us; 117us; 40us; 122us; 0us; 16432us; 1us; 16433us; 40us; 122us; 2us; 32768us; 6us; 127us; 40us; 122us; 2us; 16438us; 2us; 128us; 40us; 122us; 2us; 32768us; 2us; 128us; 40us; 122us; 6us; 32768us; 5us; 126us; 35us; 123us; 36us; 124us; 37us; 125us; 38us; 114us; 39us; 110us; 0us; 16434us; 0us; 16435us; 0us; 16436us; 6us; 32768us; 5us; 126us; 35us; 123us; 36us; 124us; 37us; 125us; 38us; 114us; 39us; 110us; 0us; 16437us; 6us; 32768us; 5us; 126us; 35us; 123us; 36us; 124us; 37us; 125us; 38us; 114us; 39us; 110us; 0us; 16439us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 16us; 17us; 18us; 31us; 44us; 46us; 48us; 62us; 75us; 91us; 92us; 95us; 97us; 99us; 113us; 126us; 142us; 143us; 145us; 147us; 149us; 156us; 159us; 173us; 186us; 202us; 203us; 210us; 217us; 231us; 245us; 259us; 273us; 287us; 299us; 313us; 315us; 329us; 334us; 348us; 350us; 364us; 366us; 380us; 382us; 396us; 398us; 403us; 408us; 410us; 412us; 422us; 432us; 434us; 442us; 450us; 458us; 471us; 486us; 500us; 514us; 528us; 542us; 556us; 570us; 584us; 598us; 612us; 626us; 640us; 654us; 668us; 670us; 671us; 672us; 673us; 689us; 691us; 692us; 708us; 709us; 711us; 712us; 714us; 716us; 730us; 731us; 732us; 733us; 734us; 735us; 736us; 738us; 740us; 747us; 750us; 751us; 765us; 766us; 769us; 770us; 772us; 773us; 775us; 777us; 778us; 780us; 787us; 789us; 790us; 792us; 799us; 801us; 802us; 804us; 811us; 814us; 815us; 817us; 820us; 823us; 826us; 833us; 834us; 835us; 836us; 843us; 844us; 851us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 6us; 7us; 10us; 1us; 1us; 6us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 3us; 3us; 3us; 5us; 2us; 2us; 1us; 1us; 2us; 6us; 3us; 3us; 2us; 3us; 1us; 3us; 3us; 1us; 4us; 4us; 3us; 1us; 1us; 1us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 6us; 6us; 6us; 6us; 7us; 7us; 8us; 8us; 9us; 9us; 10us; 11us; 11us; 11us; 11us; 12us; 12us; 12us; 12us; 13us; 13us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16410us; 16411us; 16412us; 65535us; 65535us; 16413us; 65535us; 16414us; 65535us; 16415us; 65535us; 65535us; 65535us; 16416us; 16417us; 16418us; 16419us; 16420us; 16421us; 65535us; 65535us; 65535us; 65535us; 16422us; 65535us; 16424us; 65535us; 16425us; 65535us; 16426us; 65535us; 65535us; 16428us; 65535us; 65535us; 65535us; 16430us; 65535us; 65535us; 65535us; 16431us; 65535us; 65535us; 65535us; 16432us; 65535us; 65535us; 65535us; 65535us; 65535us; 16434us; 16435us; 16436us; 65535us; 16437us; 65535us; 16439us; |]
let _fsyacc_reductions ()  =    [| 
# 392 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 401 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "PlcParser.fsy"
                                                                               _1                              
                   )
# 64 "PlcParser.fsy"
                 : Absyn.expr));
# 412 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "PlcParser.fsy"
                                                                               _1                              
                   )
# 67 "PlcParser.fsy"
                 : 'Decl));
# 423 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "PlcParser.fsy"
                                                                                Let (_2, _4, _6)               
                   )
# 68 "PlcParser.fsy"
                 : 'Decl));
# 436 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "PlcParser.fsy"
                                                                               Let (_2, makeFunAnon _3 _5, _7) 
                   )
# 69 "PlcParser.fsy"
                 : 'Decl));
# 450 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "PlcParser.fsy"
                                                                               makeFunRec _3 _4 _6 _8 _10      
                   )
# 70 "PlcParser.fsy"
                 : 'Decl));
# 465 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "PlcParser.fsy"
                                                                               _1                              
                   )
# 73 "PlcParser.fsy"
                 : 'Expr));
# 476 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AppExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "PlcParser.fsy"
                                                                               _1                              
                   )
# 74 "PlcParser.fsy"
                 : 'Expr));
# 487 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "PlcParser.fsy"
                                                                               If (_2, _4, _6)                 
                   )
# 75 "PlcParser.fsy"
                 : 'Expr));
# 500 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "PlcParser.fsy"
                                                                               Prim1 ("!", _2)                 
                   )
# 76 "PlcParser.fsy"
                 : 'Expr));
# 511 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "PlcParser.fsy"
                                                                               Prim1 ("-", _2)                 
                   )
# 77 "PlcParser.fsy"
                 : 'Expr));
# 522 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "PlcParser.fsy"
                                                                               Prim1 ("hd", _2)                
                   )
# 78 "PlcParser.fsy"
                 : 'Expr));
# 533 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "PlcParser.fsy"
                                                                               Prim1 ("tl", _2)                
                   )
# 79 "PlcParser.fsy"
                 : 'Expr));
# 544 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "PlcParser.fsy"
                                                                               Prim1 ("ise", _2)               
                   )
# 80 "PlcParser.fsy"
                 : 'Expr));
# 555 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "PlcParser.fsy"
                                                                               Prim1 ("print", _2)             
                   )
# 81 "PlcParser.fsy"
                 : 'Expr));
# 566 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "PlcParser.fsy"
                                                                                Prim2 ("+", _1, _3)            
                   )
# 82 "PlcParser.fsy"
                 : 'Expr));
# 578 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "PlcParser.fsy"
                                                                               Prim2 ("-", _1, _3)             
                   )
# 83 "PlcParser.fsy"
                 : 'Expr));
# 590 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "PlcParser.fsy"
                                                                               Prim2 ("*", _1, _3)             
                   )
# 84 "PlcParser.fsy"
                 : 'Expr));
# 602 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "PlcParser.fsy"
                                                                               Prim2 ("/", _1, _3)             
                   )
# 85 "PlcParser.fsy"
                 : 'Expr));
# 614 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "PlcParser.fsy"
                                                                               Prim2 ("=", _1, _3)             
                   )
# 86 "PlcParser.fsy"
                 : 'Expr));
# 626 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "PlcParser.fsy"
                                                                               Prim2 ("!=", _1, _3)            
                   )
# 87 "PlcParser.fsy"
                 : 'Expr));
# 638 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "PlcParser.fsy"
                                                                               Prim2 ("&&", _1, _3)            
                   )
# 88 "PlcParser.fsy"
                 : 'Expr));
# 650 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "PlcParser.fsy"
                                                                               Prim2 ("<", _1, _3)             
                   )
# 89 "PlcParser.fsy"
                 : 'Expr));
# 662 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "PlcParser.fsy"
                                                                               Prim2 ("<=", _1, _3)            
                   )
# 90 "PlcParser.fsy"
                 : 'Expr));
# 674 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "PlcParser.fsy"
                                                                               Prim2 ("::", _1, _3)            
                   )
# 91 "PlcParser.fsy"
                 : 'Expr));
# 686 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "PlcParser.fsy"
                                                                               Prim2 (";", _1, _3)             
                   )
# 92 "PlcParser.fsy"
                 : 'Expr));
# 698 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "PlcParser.fsy"
                                                                               Sel (_1, _3)                    
                   )
# 93 "PlcParser.fsy"
                 : 'Expr));
# 710 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "PlcParser.fsy"
                                                                               _1                              
                   )
# 96 "PlcParser.fsy"
                 : 'AtExpr));
# 721 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "PlcParser.fsy"
                                                                               Var _1                          
                   )
# 97 "PlcParser.fsy"
                 : 'AtExpr));
# 732 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Decl)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "PlcParser.fsy"
                                                                               _2                              
                   )
# 98 "PlcParser.fsy"
                 : 'AtExpr));
# 743 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "PlcParser.fsy"
                                                                               _2                              
                   )
# 99 "PlcParser.fsy"
                 : 'AtExpr));
# 754 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Comps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "PlcParser.fsy"
                                                                               Tuple _2                        
                   )
# 100 "PlcParser.fsy"
                 : 'AtExpr));
# 765 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "PlcParser.fsy"
                                                                               makeFunAnon _2 _4               
                   )
# 101 "PlcParser.fsy"
                 : 'AtExpr));
# 777 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "PlcParser.fsy"
                                                                               Call (_1, _2)                   
                   )
# 104 "PlcParser.fsy"
                 : 'AppExpr));
# 789 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AppExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "PlcParser.fsy"
                                                                               Call (_1, _2)                   
                   )
# 105 "PlcParser.fsy"
                 : 'AppExpr));
# 801 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "PlcParser.fsy"
                                                                               ConB _1                         
                   )
# 108 "PlcParser.fsy"
                 : 'Const));
# 812 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "PlcParser.fsy"
                                                                               ConI _1                         
                   )
# 109 "PlcParser.fsy"
                 : 'Const));
# 823 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "PlcParser.fsy"
                                                                               Tuple []                        
                   )
# 110 "PlcParser.fsy"
                 : 'Const));
# 833 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "PlcParser.fsy"
                                                                               EList _5                        
                   )
# 111 "PlcParser.fsy"
                 : 'Const));
# 844 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "PlcParser.fsy"
                                                                               [_1 ; _3]                       
                   )
# 114 "PlcParser.fsy"
                 : 'Comps));
# 856 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Comps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "PlcParser.fsy"
                                                                               _1 :: _3                        
                   )
# 115 "PlcParser.fsy"
                 : 'Comps));
# 868 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "PlcParser.fsy"
                                                                               Tuple []                        
                   )
# 118 "PlcParser.fsy"
                 : 'Args));
# 878 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "PlcParser.fsy"
                                                                               _2                              
                   )
# 119 "PlcParser.fsy"
                 : 'Args));
# 889 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypedVar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "PlcParser.fsy"
                                                                               [_1]                            
                   )
# 122 "PlcParser.fsy"
                 : 'Params));
# 900 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypedVar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "PlcParser.fsy"
                                                                                _1 :: _3                       
                   )
# 123 "PlcParser.fsy"
                 : 'Params));
# 912 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "PlcParser.fsy"
                                                                               (_1, _3)                        
                   )
# 126 "PlcParser.fsy"
                 : 'TypedVar));
# 924 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "PlcParser.fsy"
                                                                               _1                              
                   )
# 129 "PlcParser.fsy"
                 : 'Type));
# 935 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Types)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "PlcParser.fsy"
                                                                               TupT _3                         
                   )
# 130 "PlcParser.fsy"
                 : 'Type));
# 946 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "PlcParser.fsy"
                                                                               LisT _3                         
                   )
# 131 "PlcParser.fsy"
                 : 'Type));
# 957 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "PlcParser.fsy"
                                                                               FunT (_1, _3)                   
                   )
# 132 "PlcParser.fsy"
                 : 'Type));
# 969 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "PlcParser.fsy"
                                                                               TupT []                         
                   )
# 135 "PlcParser.fsy"
                 : 'AtType));
# 979 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "PlcParser.fsy"
                                                                               BooT                            
                   )
# 136 "PlcParser.fsy"
                 : 'AtType));
# 989 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "PlcParser.fsy"
                                                                               IntT                            
                   )
# 137 "PlcParser.fsy"
                 : 'AtType));
# 999 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 138 "PlcParser.fsy"
                                                                               _2                              
                   )
# 138 "PlcParser.fsy"
                 : 'AtType));
# 1010 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "PlcParser.fsy"
                                                                               [_1, _3]                        
                   )
# 141 "PlcParser.fsy"
                 : 'Types));
# 1022 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Types)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "PlcParser.fsy"
                                                                               _1 :: _3                        
                   )
# 142 "PlcParser.fsy"
                 : 'Types));
|]
# 1035 "PlcParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 47;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
