// Implementation file for parser generated by fsyacc
module PlcParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "PlcParser.fsy"

 open Absyn
 open ParAux

# 11 "PlcParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | HASH
  | COMMA
  | COLON
  | SEMIC
  | LPAR
  | RPAR
  | LBRACE
  | RBRACE
  | LBRACK
  | RBRACK
  | EQ
  | NEQ
  | LT
  | LTE
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | PRINT
  | CONS
  | HEAD
  | TAIL
  | ISE
  | NOT
  | AND
  | IF
  | THEN
  | ELSE
  | VAR
  | FUN
  | REC
  | DARROW
  | FN
  | END
  | UNIT
  | BOOL
  | INT
  | LIST
  | TUPLE
  | ARROW
  | CSTBOOL of (bool)
  | NAME of (string)
  | CSTINT of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_HASH
    | TOKEN_COMMA
    | TOKEN_COLON
    | TOKEN_SEMIC
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_EQ
    | TOKEN_NEQ
    | TOKEN_LT
    | TOKEN_LTE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PRINT
    | TOKEN_CONS
    | TOKEN_HEAD
    | TOKEN_TAIL
    | TOKEN_ISE
    | TOKEN_NOT
    | TOKEN_AND
    | TOKEN_IF
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_VAR
    | TOKEN_FUN
    | TOKEN_REC
    | TOKEN_DARROW
    | TOKEN_FN
    | TOKEN_END
    | TOKEN_UNIT
    | TOKEN_BOOL
    | TOKEN_INT
    | TOKEN_LIST
    | TOKEN_TUPLE
    | TOKEN_ARROW
    | TOKEN_CSTBOOL
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Prog
    | NONTERM_Expr
    | NONTERM_LExpr
    | NONTERM_AtExpr
    | NONTERM_AppExpr
    | NONTERM_Const
    | NONTERM_ListComps
    | NONTERM_Comps
    | NONTERM_Args
    | NONTERM_Params
    | NONTERM_TypedVar
    | NONTERM_Type
    | NONTERM_AtType
    | NONTERM_Types

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | HASH  -> 1 
  | COMMA  -> 2 
  | COLON  -> 3 
  | SEMIC  -> 4 
  | LPAR  -> 5 
  | RPAR  -> 6 
  | LBRACE  -> 7 
  | RBRACE  -> 8 
  | LBRACK  -> 9 
  | RBRACK  -> 10 
  | EQ  -> 11 
  | NEQ  -> 12 
  | LT  -> 13 
  | LTE  -> 14 
  | PLUS  -> 15 
  | MINUS  -> 16 
  | TIMES  -> 17 
  | DIV  -> 18 
  | PRINT  -> 19 
  | CONS  -> 20 
  | HEAD  -> 21 
  | TAIL  -> 22 
  | ISE  -> 23 
  | NOT  -> 24 
  | AND  -> 25 
  | IF  -> 26 
  | THEN  -> 27 
  | ELSE  -> 28 
  | VAR  -> 29 
  | FUN  -> 30 
  | REC  -> 31 
  | DARROW  -> 32 
  | FN  -> 33 
  | END  -> 34 
  | UNIT  -> 35 
  | BOOL  -> 36 
  | INT  -> 37 
  | LIST  -> 38 
  | TUPLE  -> 39 
  | ARROW  -> 40 
  | CSTBOOL _ -> 41 
  | NAME _ -> 42 
  | CSTINT _ -> 43 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_HASH 
  | 2 -> TOKEN_COMMA 
  | 3 -> TOKEN_COLON 
  | 4 -> TOKEN_SEMIC 
  | 5 -> TOKEN_LPAR 
  | 6 -> TOKEN_RPAR 
  | 7 -> TOKEN_LBRACE 
  | 8 -> TOKEN_RBRACE 
  | 9 -> TOKEN_LBRACK 
  | 10 -> TOKEN_RBRACK 
  | 11 -> TOKEN_EQ 
  | 12 -> TOKEN_NEQ 
  | 13 -> TOKEN_LT 
  | 14 -> TOKEN_LTE 
  | 15 -> TOKEN_PLUS 
  | 16 -> TOKEN_MINUS 
  | 17 -> TOKEN_TIMES 
  | 18 -> TOKEN_DIV 
  | 19 -> TOKEN_PRINT 
  | 20 -> TOKEN_CONS 
  | 21 -> TOKEN_HEAD 
  | 22 -> TOKEN_TAIL 
  | 23 -> TOKEN_ISE 
  | 24 -> TOKEN_NOT 
  | 25 -> TOKEN_AND 
  | 26 -> TOKEN_IF 
  | 27 -> TOKEN_THEN 
  | 28 -> TOKEN_ELSE 
  | 29 -> TOKEN_VAR 
  | 30 -> TOKEN_FUN 
  | 31 -> TOKEN_REC 
  | 32 -> TOKEN_DARROW 
  | 33 -> TOKEN_FN 
  | 34 -> TOKEN_END 
  | 35 -> TOKEN_UNIT 
  | 36 -> TOKEN_BOOL 
  | 37 -> TOKEN_INT 
  | 38 -> TOKEN_LIST 
  | 39 -> TOKEN_TUPLE 
  | 40 -> TOKEN_ARROW 
  | 41 -> TOKEN_CSTBOOL 
  | 42 -> TOKEN_NAME 
  | 43 -> TOKEN_CSTINT 
  | 46 -> TOKEN_end_of_input
  | 44 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_Prog 
    | 3 -> NONTERM_Prog 
    | 4 -> NONTERM_Prog 
    | 5 -> NONTERM_Prog 
    | 6 -> NONTERM_Expr 
    | 7 -> NONTERM_Expr 
    | 8 -> NONTERM_Expr 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Expr 
    | 16 -> NONTERM_Expr 
    | 17 -> NONTERM_Expr 
    | 18 -> NONTERM_Expr 
    | 19 -> NONTERM_Expr 
    | 20 -> NONTERM_Expr 
    | 21 -> NONTERM_Expr 
    | 22 -> NONTERM_Expr 
    | 23 -> NONTERM_Expr 
    | 24 -> NONTERM_Expr 
    | 25 -> NONTERM_Expr 
    | 26 -> NONTERM_Expr 
    | 27 -> NONTERM_LExpr 
    | 28 -> NONTERM_LExpr 
    | 29 -> NONTERM_LExpr 
    | 30 -> NONTERM_LExpr 
    | 31 -> NONTERM_LExpr 
    | 32 -> NONTERM_LExpr 
    | 33 -> NONTERM_LExpr 
    | 34 -> NONTERM_LExpr 
    | 35 -> NONTERM_LExpr 
    | 36 -> NONTERM_LExpr 
    | 37 -> NONTERM_LExpr 
    | 38 -> NONTERM_LExpr 
    | 39 -> NONTERM_LExpr 
    | 40 -> NONTERM_LExpr 
    | 41 -> NONTERM_LExpr 
    | 42 -> NONTERM_LExpr 
    | 43 -> NONTERM_LExpr 
    | 44 -> NONTERM_LExpr 
    | 45 -> NONTERM_LExpr 
    | 46 -> NONTERM_LExpr 
    | 47 -> NONTERM_AtExpr 
    | 48 -> NONTERM_AtExpr 
    | 49 -> NONTERM_AtExpr 
    | 50 -> NONTERM_AtExpr 
    | 51 -> NONTERM_AtExpr 
    | 52 -> NONTERM_AtExpr 
    | 53 -> NONTERM_AppExpr 
    | 54 -> NONTERM_AppExpr 
    | 55 -> NONTERM_Const 
    | 56 -> NONTERM_Const 
    | 57 -> NONTERM_Const 
    | 58 -> NONTERM_Const 
    | 59 -> NONTERM_Const 
    | 60 -> NONTERM_ListComps 
    | 61 -> NONTERM_ListComps 
    | 62 -> NONTERM_Comps 
    | 63 -> NONTERM_Comps 
    | 64 -> NONTERM_Args 
    | 65 -> NONTERM_Args 
    | 66 -> NONTERM_Params 
    | 67 -> NONTERM_Params 
    | 68 -> NONTERM_TypedVar 
    | 69 -> NONTERM_Type 
    | 70 -> NONTERM_Type 
    | 71 -> NONTERM_Type 
    | 72 -> NONTERM_Type 
    | 73 -> NONTERM_AtType 
    | 74 -> NONTERM_AtType 
    | 75 -> NONTERM_AtType 
    | 76 -> NONTERM_AtType 
    | 77 -> NONTERM_Types 
    | 78 -> NONTERM_Types 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 46 
let _fsyacc_tagOfErrorTerminal = 44

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | HASH  -> "HASH" 
  | COMMA  -> "COMMA" 
  | COLON  -> "COLON" 
  | SEMIC  -> "SEMIC" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRACE  -> "LBRACE" 
  | RBRACE  -> "RBRACE" 
  | LBRACK  -> "LBRACK" 
  | RBRACK  -> "RBRACK" 
  | EQ  -> "EQ" 
  | NEQ  -> "NEQ" 
  | LT  -> "LT" 
  | LTE  -> "LTE" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PRINT  -> "PRINT" 
  | CONS  -> "CONS" 
  | HEAD  -> "HEAD" 
  | TAIL  -> "TAIL" 
  | ISE  -> "ISE" 
  | NOT  -> "NOT" 
  | AND  -> "AND" 
  | IF  -> "IF" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | VAR  -> "VAR" 
  | FUN  -> "FUN" 
  | REC  -> "REC" 
  | DARROW  -> "DARROW" 
  | FN  -> "FN" 
  | END  -> "END" 
  | UNIT  -> "UNIT" 
  | BOOL  -> "BOOL" 
  | INT  -> "INT" 
  | LIST  -> "LIST" 
  | TUPLE  -> "TUPLE" 
  | ARROW  -> "ARROW" 
  | CSTBOOL _ -> "CSTBOOL" 
  | NAME _ -> "NAME" 
  | CSTINT _ -> "CSTINT" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | HASH  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMIC  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACK  -> (null : System.Object) 
  | RBRACK  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | NEQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LTE  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PRINT  -> (null : System.Object) 
  | CONS  -> (null : System.Object) 
  | HEAD  -> (null : System.Object) 
  | TAIL  -> (null : System.Object) 
  | ISE  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | VAR  -> (null : System.Object) 
  | FUN  -> (null : System.Object) 
  | REC  -> (null : System.Object) 
  | DARROW  -> (null : System.Object) 
  | FN  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | UNIT  -> (null : System.Object) 
  | BOOL  -> (null : System.Object) 
  | INT  -> (null : System.Object) 
  | LIST  -> (null : System.Object) 
  | TUPLE  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
  | CSTBOOL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | CSTINT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 5us; 65535us; 0us; 2us; 10us; 11us; 17us; 18us; 26us; 27us; 120us; 121us; 31us; 65535us; 0us; 5us; 8us; 9us; 10us; 4us; 15us; 16us; 17us; 4us; 24us; 25us; 26us; 4us; 30us; 31us; 32us; 33us; 34us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 47us; 62us; 48us; 63us; 49us; 64us; 50us; 65us; 51us; 66us; 52us; 67us; 53us; 68us; 54us; 69us; 55us; 70us; 56us; 71us; 57us; 72us; 58us; 120us; 5us; 123us; 59us; 129us; 60us; 146us; 61us; 22us; 65535us; 77us; 78us; 79us; 80us; 81us; 82us; 83us; 84us; 85us; 86us; 87us; 88us; 89us; 90us; 91us; 92us; 93us; 94us; 106us; 95us; 107us; 96us; 108us; 97us; 109us; 98us; 110us; 99us; 111us; 100us; 112us; 101us; 113us; 102us; 114us; 103us; 115us; 104us; 136us; 105us; 137us; 105us; 144us; 105us; 57us; 65535us; 0us; 28us; 8us; 28us; 10us; 28us; 15us; 28us; 17us; 28us; 24us; 28us; 26us; 28us; 28us; 131us; 29us; 132us; 30us; 28us; 32us; 28us; 34us; 28us; 36us; 28us; 38us; 28us; 40us; 28us; 42us; 28us; 44us; 28us; 46us; 28us; 62us; 28us; 63us; 28us; 64us; 28us; 65us; 28us; 66us; 28us; 67us; 28us; 68us; 28us; 69us; 28us; 70us; 28us; 71us; 28us; 72us; 28us; 75us; 131us; 76us; 132us; 77us; 75us; 79us; 75us; 81us; 75us; 83us; 75us; 85us; 75us; 87us; 75us; 89us; 75us; 91us; 75us; 93us; 75us; 106us; 75us; 107us; 75us; 108us; 75us; 109us; 75us; 110us; 75us; 111us; 75us; 112us; 75us; 113us; 75us; 114us; 75us; 115us; 75us; 120us; 28us; 123us; 28us; 129us; 28us; 136us; 75us; 137us; 75us; 144us; 75us; 146us; 28us; 53us; 65535us; 0us; 29us; 8us; 29us; 10us; 29us; 15us; 29us; 17us; 29us; 24us; 29us; 26us; 29us; 30us; 29us; 32us; 29us; 34us; 29us; 36us; 29us; 38us; 29us; 40us; 29us; 42us; 29us; 44us; 29us; 46us; 29us; 62us; 29us; 63us; 29us; 64us; 29us; 65us; 29us; 66us; 29us; 67us; 29us; 68us; 29us; 69us; 29us; 70us; 29us; 71us; 29us; 72us; 29us; 77us; 76us; 79us; 76us; 81us; 76us; 83us; 76us; 85us; 76us; 87us; 76us; 89us; 76us; 91us; 76us; 93us; 76us; 106us; 76us; 107us; 76us; 108us; 76us; 109us; 76us; 110us; 76us; 111us; 76us; 112us; 76us; 113us; 76us; 114us; 76us; 115us; 76us; 120us; 29us; 123us; 29us; 129us; 29us; 136us; 76us; 137us; 76us; 144us; 76us; 146us; 29us; 57us; 65535us; 0us; 118us; 8us; 118us; 10us; 118us; 15us; 118us; 17us; 118us; 24us; 118us; 26us; 118us; 28us; 118us; 29us; 118us; 30us; 118us; 32us; 118us; 34us; 118us; 36us; 118us; 38us; 118us; 40us; 118us; 42us; 118us; 44us; 118us; 46us; 118us; 62us; 118us; 63us; 118us; 64us; 118us; 65us; 118us; 66us; 118us; 67us; 118us; 68us; 118us; 69us; 118us; 70us; 118us; 71us; 118us; 72us; 118us; 75us; 118us; 76us; 118us; 77us; 118us; 79us; 118us; 81us; 118us; 83us; 118us; 85us; 118us; 87us; 118us; 89us; 118us; 91us; 118us; 93us; 118us; 106us; 118us; 107us; 118us; 108us; 118us; 109us; 118us; 110us; 118us; 111us; 118us; 112us; 118us; 113us; 118us; 114us; 118us; 115us; 118us; 120us; 118us; 123us; 118us; 129us; 118us; 136us; 118us; 137us; 118us; 144us; 118us; 146us; 118us; 3us; 65535us; 136us; 138us; 137us; 138us; 144us; 145us; 2us; 65535us; 123us; 125us; 146us; 147us; 3us; 65535us; 13us; 14us; 20us; 21us; 127us; 128us; 2us; 65535us; 148us; 150us; 153us; 154us; 2us; 65535us; 148us; 152us; 153us; 152us; 8us; 65535us; 22us; 23us; 141us; 142us; 156us; 157us; 160us; 170us; 164us; 165us; 171us; 167us; 175us; 168us; 177us; 169us; 8us; 65535us; 22us; 158us; 141us; 158us; 156us; 158us; 160us; 158us; 164us; 158us; 171us; 158us; 175us; 158us; 177us; 158us; 2us; 65535us; 160us; 161us; 177us; 178us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 9us; 41us; 64us; 122us; 176us; 234us; 238us; 241us; 245us; 248us; 251us; 260us; 269us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 14us; 2us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 25us; 26us; 13us; 2us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 1us; 3us; 1us; 3us; 1us; 3us; 13us; 3us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 2us; 3us; 25us; 1us; 3us; 2us; 4us; 5us; 1us; 4us; 1us; 4us; 1us; 4us; 13us; 4us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 2us; 4us; 25us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 2us; 5us; 72us; 1us; 5us; 13us; 5us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 2us; 5us; 25us; 1us; 5us; 2us; 6us; 53us; 2us; 7us; 54us; 1us; 8us; 13us; 8us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 1us; 8us; 13us; 8us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 1us; 8us; 13us; 8us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 1us; 9us; 13us; 9us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 1us; 10us; 13us; 10us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 1us; 11us; 13us; 11us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 1us; 12us; 13us; 12us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 1us; 13us; 13us; 13us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 1us; 14us; 13us; 14us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 13us; 15us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 13us; 15us; 16us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 13us; 15us; 16us; 17us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 13us; 15us; 16us; 17us; 18us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 13us; 15us; 16us; 17us; 18us; 19us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 13us; 15us; 16us; 17us; 18us; 19us; 20us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 13us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 21us; 22us; 23us; 24us; 25us; 26us; 13us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 22us; 23us; 24us; 25us; 26us; 13us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 23us; 24us; 25us; 26us; 13us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 24us; 25us; 26us; 13us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 25us; 26us; 15us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 50us; 62us; 63us; 13us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 52us; 15us; 15us; 16us; 17us; 18us; 19us; 20us; 21us; 22us; 23us; 24us; 25us; 26us; 62us; 62us; 63us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 1us; 26us; 2us; 27us; 53us; 2us; 28us; 54us; 1us; 29us; 12us; 29us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 1us; 29us; 12us; 29us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 1us; 29us; 12us; 29us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 1us; 30us; 12us; 30us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 1us; 31us; 12us; 31us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 1us; 32us; 12us; 32us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 1us; 33us; 12us; 33us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 1us; 34us; 12us; 34us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 1us; 35us; 12us; 35us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 12us; 36us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 12us; 36us; 37us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 12us; 36us; 37us; 38us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 12us; 36us; 37us; 38us; 39us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 12us; 36us; 37us; 38us; 39us; 40us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 12us; 36us; 37us; 38us; 39us; 40us; 41us; 41us; 42us; 43us; 44us; 45us; 46us; 12us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 42us; 43us; 44us; 45us; 46us; 12us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 43us; 44us; 45us; 46us; 12us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 44us; 45us; 46us; 12us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 45us; 46us; 13us; 36us; 37us; 38us; 39us; 40us; 41us; 42us; 43us; 44us; 45us; 46us; 60us; 61us; 1us; 36us; 1us; 37us; 1us; 38us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 1us; 46us; 1us; 47us; 1us; 48us; 1us; 49us; 1us; 49us; 1us; 49us; 4us; 50us; 51us; 57us; 59us; 1us; 50us; 1us; 51us; 1us; 51us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 53us; 1us; 54us; 1us; 55us; 1us; 56us; 1us; 57us; 1us; 58us; 2us; 58us; 59us; 1us; 58us; 1us; 58us; 1us; 59us; 1us; 59us; 2us; 59us; 72us; 1us; 59us; 1us; 61us; 1us; 61us; 2us; 62us; 63us; 1us; 63us; 2us; 64us; 65us; 1us; 64us; 1us; 65us; 1us; 65us; 2us; 66us; 67us; 1us; 67us; 1us; 67us; 1us; 68us; 1us; 68us; 2us; 68us; 72us; 1us; 69us; 1us; 70us; 1us; 70us; 1us; 70us; 1us; 70us; 1us; 71us; 1us; 71us; 2us; 71us; 72us; 1us; 71us; 2us; 72us; 72us; 2us; 72us; 76us; 4us; 72us; 77us; 77us; 78us; 3us; 72us; 77us; 78us; 1us; 72us; 1us; 73us; 1us; 74us; 1us; 75us; 1us; 76us; 1us; 76us; 2us; 77us; 78us; 1us; 78us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 23us; 37us; 39us; 41us; 43us; 57us; 60us; 62us; 65us; 67us; 69us; 71us; 85us; 88us; 90us; 92us; 94us; 96us; 98us; 101us; 103us; 117us; 120us; 122us; 125us; 128us; 130us; 144us; 146us; 160us; 162us; 176us; 178us; 192us; 194us; 208us; 210us; 224us; 226us; 240us; 242us; 256us; 258us; 272us; 286us; 300us; 314us; 328us; 342us; 356us; 370us; 384us; 398us; 412us; 426us; 442us; 456us; 472us; 474us; 476us; 478us; 480us; 482us; 484us; 486us; 488us; 490us; 492us; 494us; 496us; 498us; 501us; 504us; 506us; 519us; 521us; 534us; 536us; 549us; 551us; 564us; 566us; 579us; 581us; 594us; 596us; 609us; 611us; 624us; 626us; 639us; 652us; 665us; 678us; 691us; 704us; 717us; 730us; 743us; 756us; 769us; 783us; 785us; 787us; 789us; 791us; 793us; 795us; 797us; 799us; 801us; 803us; 805us; 807us; 809us; 811us; 813us; 815us; 817us; 822us; 824us; 826us; 828us; 830us; 832us; 834us; 836us; 838us; 840us; 842us; 844us; 846us; 848us; 851us; 853us; 855us; 857us; 859us; 862us; 864us; 866us; 868us; 871us; 873us; 876us; 878us; 880us; 882us; 885us; 887us; 889us; 891us; 893us; 896us; 898us; 900us; 902us; 904us; 906us; 908us; 910us; 913us; 915us; 918us; 921us; 926us; 930us; 932us; 934us; 936us; 938us; 940us; 942us; 945us; |]
let _fsyacc_action_rows = 179
let _fsyacc_actionTableElements = [|16us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 29us; 6us; 30us; 12us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 12us; 16386us; 1us; 73us; 4us; 72us; 11us; 66us; 12us; 67us; 13us; 69us; 14us; 70us; 15us; 62us; 16us; 63us; 17us; 64us; 18us; 65us; 20us; 71us; 25us; 68us; 12us; 16386us; 1us; 73us; 4us; 72us; 11us; 66us; 12us; 67us; 13us; 69us; 14us; 70us; 15us; 62us; 16us; 63us; 17us; 64us; 18us; 65us; 20us; 71us; 25us; 68us; 1us; 32768us; 42us; 7us; 1us; 32768us; 11us; 8us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 12us; 32768us; 1us; 73us; 4us; 10us; 11us; 66us; 12us; 67us; 13us; 69us; 14us; 70us; 15us; 62us; 16us; 63us; 17us; 64us; 18us; 65us; 20us; 71us; 25us; 68us; 16us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 29us; 6us; 30us; 12us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 0us; 16387us; 2us; 32768us; 31us; 19us; 42us; 13us; 1us; 32768us; 5us; 148us; 1us; 32768us; 11us; 15us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 12us; 32768us; 1us; 73us; 4us; 17us; 11us; 66us; 12us; 67us; 13us; 69us; 14us; 70us; 15us; 62us; 16us; 63us; 17us; 64us; 18us; 65us; 20us; 71us; 25us; 68us; 16us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 29us; 6us; 30us; 12us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 0us; 16388us; 1us; 32768us; 42us; 20us; 1us; 32768us; 5us; 148us; 1us; 32768us; 3us; 22us; 6us; 32768us; 5us; 175us; 35us; 172us; 36us; 173us; 37us; 174us; 38us; 163us; 39us; 159us; 2us; 32768us; 11us; 24us; 40us; 171us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 12us; 32768us; 1us; 73us; 4us; 26us; 11us; 66us; 12us; 67us; 13us; 69us; 14us; 70us; 15us; 62us; 16us; 63us; 17us; 64us; 18us; 65us; 20us; 71us; 25us; 68us; 16us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 29us; 6us; 30us; 12us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 0us; 16389us; 7us; 16390us; 5us; 123us; 7us; 120us; 9us; 136us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 7us; 16391us; 5us; 123us; 7us; 120us; 9us; 136us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 13us; 32768us; 1us; 73us; 4us; 72us; 11us; 66us; 12us; 67us; 13us; 69us; 14us; 70us; 15us; 62us; 16us; 63us; 17us; 64us; 18us; 65us; 20us; 71us; 25us; 68us; 27us; 32us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 13us; 32768us; 1us; 73us; 4us; 72us; 11us; 66us; 12us; 67us; 13us; 69us; 14us; 70us; 15us; 62us; 16us; 63us; 17us; 64us; 18us; 65us; 20us; 71us; 25us; 68us; 28us; 34us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 11us; 16392us; 1us; 73us; 11us; 66us; 12us; 67us; 13us; 69us; 14us; 70us; 15us; 62us; 16us; 63us; 17us; 64us; 18us; 65us; 20us; 71us; 25us; 68us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 1us; 16393us; 1us; 73us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 3us; 16394us; 1us; 73us; 17us; 64us; 18us; 65us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 1us; 16395us; 1us; 73us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 1us; 16396us; 1us; 73us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 1us; 16397us; 1us; 73us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 1us; 16398us; 1us; 73us; 3us; 16399us; 1us; 73us; 17us; 64us; 18us; 65us; 3us; 16400us; 1us; 73us; 17us; 64us; 18us; 65us; 1us; 16401us; 1us; 73us; 1us; 16402us; 1us; 73us; 8us; 16403us; 1us; 73us; 13us; 69us; 14us; 70us; 15us; 62us; 16us; 63us; 17us; 64us; 18us; 65us; 20us; 71us; 8us; 16404us; 1us; 73us; 13us; 69us; 14us; 70us; 15us; 62us; 16us; 63us; 17us; 64us; 18us; 65us; 20us; 71us; 10us; 16405us; 1us; 73us; 11us; 66us; 12us; 67us; 13us; 69us; 14us; 70us; 15us; 62us; 16us; 63us; 17us; 64us; 18us; 65us; 20us; 71us; 6us; 16406us; 1us; 73us; 15us; 62us; 16us; 63us; 17us; 64us; 18us; 65us; 20us; 71us; 6us; 16407us; 1us; 73us; 15us; 62us; 16us; 63us; 17us; 64us; 18us; 65us; 20us; 71us; 6us; 16408us; 1us; 73us; 15us; 62us; 16us; 63us; 17us; 64us; 18us; 65us; 20us; 71us; 12us; 16409us; 1us; 73us; 4us; 72us; 11us; 66us; 12us; 67us; 13us; 69us; 14us; 70us; 15us; 62us; 16us; 63us; 17us; 64us; 18us; 65us; 20us; 71us; 25us; 68us; 14us; 32768us; 1us; 73us; 2us; 146us; 4us; 72us; 6us; 124us; 11us; 66us; 12us; 67us; 13us; 69us; 14us; 70us; 15us; 62us; 16us; 63us; 17us; 64us; 18us; 65us; 20us; 71us; 25us; 68us; 13us; 32768us; 1us; 73us; 4us; 72us; 11us; 66us; 12us; 67us; 13us; 69us; 14us; 70us; 15us; 62us; 16us; 63us; 17us; 64us; 18us; 65us; 20us; 71us; 25us; 68us; 34us; 130us; 13us; 16446us; 1us; 73us; 2us; 146us; 4us; 72us; 11us; 66us; 12us; 67us; 13us; 69us; 14us; 70us; 15us; 62us; 16us; 63us; 17us; 64us; 18us; 65us; 20us; 71us; 25us; 68us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 1us; 32768us; 43us; 74us; 0us; 16410us; 7us; 16411us; 5us; 123us; 7us; 120us; 9us; 136us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 7us; 16412us; 5us; 123us; 7us; 120us; 9us; 136us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 12us; 32768us; 1us; 116us; 11us; 110us; 12us; 111us; 13us; 113us; 14us; 114us; 15us; 106us; 16us; 107us; 17us; 108us; 18us; 109us; 20us; 115us; 25us; 112us; 27us; 79us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 12us; 32768us; 1us; 116us; 11us; 110us; 12us; 111us; 13us; 113us; 14us; 114us; 15us; 106us; 16us; 107us; 17us; 108us; 18us; 109us; 20us; 115us; 25us; 112us; 28us; 81us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 11us; 16413us; 1us; 116us; 11us; 110us; 12us; 111us; 13us; 113us; 14us; 114us; 15us; 106us; 16us; 107us; 17us; 108us; 18us; 109us; 20us; 115us; 25us; 112us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 1us; 16414us; 1us; 116us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 3us; 16415us; 1us; 116us; 17us; 108us; 18us; 109us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 1us; 16416us; 1us; 116us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 1us; 16417us; 1us; 116us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 1us; 16418us; 1us; 116us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 1us; 16419us; 1us; 116us; 3us; 16420us; 1us; 116us; 17us; 108us; 18us; 109us; 3us; 16421us; 1us; 116us; 17us; 108us; 18us; 109us; 1us; 16422us; 1us; 116us; 1us; 16423us; 1us; 116us; 8us; 16424us; 1us; 116us; 13us; 113us; 14us; 114us; 15us; 106us; 16us; 107us; 17us; 108us; 18us; 109us; 20us; 115us; 8us; 16425us; 1us; 116us; 13us; 113us; 14us; 114us; 15us; 106us; 16us; 107us; 17us; 108us; 18us; 109us; 20us; 115us; 10us; 16426us; 1us; 116us; 11us; 110us; 12us; 111us; 13us; 113us; 14us; 114us; 15us; 106us; 16us; 107us; 17us; 108us; 18us; 109us; 20us; 115us; 6us; 16427us; 1us; 116us; 15us; 106us; 16us; 107us; 17us; 108us; 18us; 109us; 20us; 115us; 6us; 16428us; 1us; 116us; 15us; 106us; 16us; 107us; 17us; 108us; 18us; 109us; 20us; 115us; 6us; 16429us; 1us; 116us; 15us; 106us; 16us; 107us; 17us; 108us; 18us; 109us; 20us; 115us; 12us; 16444us; 1us; 116us; 4us; 144us; 11us; 110us; 12us; 111us; 13us; 113us; 14us; 114us; 15us; 106us; 16us; 107us; 17us; 108us; 18us; 109us; 20us; 115us; 25us; 112us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 1us; 32768us; 43us; 117us; 0us; 16430us; 0us; 16431us; 0us; 16432us; 16us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 29us; 6us; 30us; 12us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 1us; 32768us; 8us; 122us; 0us; 16433us; 15us; 32768us; 5us; 123us; 6us; 135us; 7us; 120us; 9us; 137us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 0us; 16434us; 1us; 32768us; 6us; 126us; 0us; 16435us; 1us; 32768us; 5us; 148us; 1us; 32768us; 32us; 129us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 0us; 16436us; 0us; 16437us; 0us; 16438us; 0us; 16439us; 0us; 16440us; 0us; 16441us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 15us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 10us; 140us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 1us; 32768us; 10us; 139us; 0us; 16442us; 1us; 32768us; 3us; 141us; 6us; 32768us; 5us; 175us; 35us; 172us; 36us; 173us; 37us; 174us; 38us; 163us; 39us; 159us; 2us; 32768us; 6us; 143us; 40us; 171us; 0us; 16443us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 85us; 19us; 93us; 21us; 87us; 22us; 89us; 23us; 91us; 24us; 83us; 26us; 77us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 0us; 16445us; 14us; 32768us; 5us; 123us; 7us; 120us; 9us; 136us; 16us; 38us; 19us; 46us; 21us; 40us; 22us; 42us; 23us; 44us; 24us; 36us; 26us; 30us; 33us; 127us; 41us; 133us; 42us; 119us; 43us; 134us; 0us; 16447us; 2us; 32768us; 6us; 149us; 42us; 155us; 0us; 16448us; 1us; 32768us; 6us; 151us; 0us; 16449us; 1us; 16450us; 2us; 153us; 1us; 32768us; 42us; 155us; 0us; 16451us; 1us; 32768us; 3us; 156us; 6us; 32768us; 5us; 175us; 35us; 172us; 36us; 173us; 37us; 174us; 38us; 163us; 39us; 159us; 1us; 16452us; 40us; 171us; 0us; 16453us; 1us; 32768us; 9us; 160us; 6us; 32768us; 5us; 175us; 35us; 172us; 36us; 173us; 37us; 174us; 38us; 163us; 39us; 159us; 1us; 32768us; 10us; 162us; 0us; 16454us; 1us; 32768us; 9us; 164us; 6us; 32768us; 5us; 175us; 35us; 172us; 36us; 173us; 37us; 174us; 38us; 163us; 39us; 159us; 2us; 32768us; 10us; 166us; 40us; 171us; 0us; 16455us; 1us; 16456us; 40us; 171us; 2us; 32768us; 6us; 176us; 40us; 171us; 2us; 16461us; 2us; 177us; 40us; 171us; 2us; 32768us; 2us; 177us; 40us; 171us; 6us; 32768us; 5us; 175us; 35us; 172us; 36us; 173us; 37us; 174us; 38us; 163us; 39us; 159us; 0us; 16457us; 0us; 16458us; 0us; 16459us; 6us; 32768us; 5us; 175us; 35us; 172us; 36us; 173us; 37us; 174us; 38us; 163us; 39us; 159us; 0us; 16460us; 6us; 32768us; 5us; 175us; 35us; 172us; 36us; 173us; 37us; 174us; 38us; 163us; 39us; 159us; 0us; 16462us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 17us; 18us; 20us; 21us; 34us; 47us; 49us; 51us; 66us; 79us; 96us; 97us; 100us; 102us; 104us; 119us; 132us; 149us; 150us; 152us; 154us; 156us; 163us; 166us; 181us; 194us; 211us; 212us; 220us; 228us; 243us; 257us; 272us; 286us; 301us; 313us; 328us; 330us; 345us; 349us; 364us; 366us; 381us; 383us; 398us; 400us; 415us; 417us; 421us; 425us; 427us; 429us; 438us; 447us; 458us; 465us; 472us; 479us; 492us; 507us; 521us; 535us; 550us; 565us; 580us; 595us; 610us; 625us; 640us; 655us; 670us; 685us; 700us; 702us; 703us; 711us; 719us; 734us; 747us; 762us; 775us; 790us; 802us; 817us; 819us; 834us; 838us; 853us; 855us; 870us; 872us; 887us; 889us; 904us; 906us; 910us; 914us; 916us; 918us; 927us; 936us; 947us; 954us; 961us; 968us; 981us; 996us; 1011us; 1026us; 1041us; 1056us; 1071us; 1086us; 1101us; 1116us; 1131us; 1133us; 1134us; 1135us; 1136us; 1153us; 1155us; 1156us; 1172us; 1173us; 1175us; 1176us; 1178us; 1180us; 1195us; 1196us; 1197us; 1198us; 1199us; 1200us; 1201us; 1216us; 1232us; 1234us; 1235us; 1237us; 1244us; 1247us; 1248us; 1263us; 1264us; 1279us; 1280us; 1283us; 1284us; 1286us; 1287us; 1289us; 1291us; 1292us; 1294us; 1301us; 1303us; 1304us; 1306us; 1313us; 1315us; 1316us; 1318us; 1325us; 1328us; 1329us; 1331us; 1334us; 1337us; 1340us; 1347us; 1348us; 1349us; 1350us; 1357us; 1358us; 1365us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 6us; 7us; 10us; 1us; 1us; 6us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 6us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 1us; 1us; 3us; 3us; 3us; 5us; 2us; 2us; 1us; 1us; 2us; 3us; 6us; 1us; 3us; 3us; 3us; 2us; 3us; 1us; 3us; 3us; 1us; 4us; 4us; 3us; 1us; 1us; 1us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; 6us; 6us; 7us; 7us; 7us; 7us; 7us; 8us; 8us; 9us; 9us; 10us; 10us; 11us; 11us; 12us; 13us; 13us; 13us; 13us; 14us; 14us; 14us; 14us; 15us; 15us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16410us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16430us; 16431us; 16432us; 65535us; 65535us; 16433us; 65535us; 16434us; 65535us; 16435us; 65535us; 65535us; 65535us; 16436us; 16437us; 16438us; 16439us; 16440us; 16441us; 65535us; 65535us; 65535us; 16442us; 65535us; 65535us; 65535us; 16443us; 65535us; 16445us; 65535us; 16447us; 65535us; 16448us; 65535us; 16449us; 65535us; 65535us; 16451us; 65535us; 65535us; 65535us; 16453us; 65535us; 65535us; 65535us; 16454us; 65535us; 65535us; 65535us; 16455us; 65535us; 65535us; 65535us; 65535us; 65535us; 16457us; 16458us; 16459us; 65535us; 16460us; 65535us; 16462us; |]
let _fsyacc_reductions ()  =    [| 
# 417 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Absyn.expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 426 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "PlcParser.fsy"
                                                                               _1                              
                   )
# 65 "PlcParser.fsy"
                 : Absyn.expr));
# 437 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "PlcParser.fsy"
                                                                               _1                              
                   )
# 68 "PlcParser.fsy"
                 : 'Prog));
# 448 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "PlcParser.fsy"
                                                                               Let (_2, _4, _6)                
                   )
# 69 "PlcParser.fsy"
                 : 'Prog));
# 461 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "PlcParser.fsy"
                                                                               Let (_2, makeAnon _3 _5, _7)    
                   )
# 70 "PlcParser.fsy"
                 : 'Prog));
# 475 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _8 = (let data = parseState.GetInput(8) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _10 = (let data = parseState.GetInput(10) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "PlcParser.fsy"
                                                                               makeFun _3 _4 _6 _8 _10      
                   )
# 71 "PlcParser.fsy"
                 : 'Prog));
# 490 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "PlcParser.fsy"
                                                                               _1                              
                   )
# 74 "PlcParser.fsy"
                 : 'Expr));
# 501 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AppExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "PlcParser.fsy"
                                                                               _1                              
                   )
# 75 "PlcParser.fsy"
                 : 'Expr));
# 512 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "PlcParser.fsy"
                                                                               If (_2, _4, _6)                 
                   )
# 76 "PlcParser.fsy"
                 : 'Expr));
# 525 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "PlcParser.fsy"
                                                                               Prim1 ("!", _2)                 
                   )
# 77 "PlcParser.fsy"
                 : 'Expr));
# 536 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "PlcParser.fsy"
                                                                               Prim1 ("-", _2)                 
                   )
# 78 "PlcParser.fsy"
                 : 'Expr));
# 547 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "PlcParser.fsy"
                                                                               Prim1 ("hd", _2)                
                   )
# 79 "PlcParser.fsy"
                 : 'Expr));
# 558 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "PlcParser.fsy"
                                                                               Prim1 ("tl", _2)                
                   )
# 80 "PlcParser.fsy"
                 : 'Expr));
# 569 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "PlcParser.fsy"
                                                                               Prim1 ("ise", _2)               
                   )
# 81 "PlcParser.fsy"
                 : 'Expr));
# 580 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "PlcParser.fsy"
                                                                               Prim1 ("print", _2)             
                   )
# 82 "PlcParser.fsy"
                 : 'Expr));
# 591 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "PlcParser.fsy"
                                                                               Prim2 ("+", _1, _3)             
                   )
# 83 "PlcParser.fsy"
                 : 'Expr));
# 603 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "PlcParser.fsy"
                                                                               Prim2 ("-", _1, _3)             
                   )
# 84 "PlcParser.fsy"
                 : 'Expr));
# 615 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "PlcParser.fsy"
                                                                               Prim2 ("*", _1, _3)             
                   )
# 85 "PlcParser.fsy"
                 : 'Expr));
# 627 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "PlcParser.fsy"
                                                                               Prim2 ("/", _1, _3)             
                   )
# 86 "PlcParser.fsy"
                 : 'Expr));
# 639 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "PlcParser.fsy"
                                                                               Prim2 ("=", _1, _3)             
                   )
# 87 "PlcParser.fsy"
                 : 'Expr));
# 651 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "PlcParser.fsy"
                                                                               Prim2 ("!=", _1, _3)            
                   )
# 88 "PlcParser.fsy"
                 : 'Expr));
# 663 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "PlcParser.fsy"
                                                                               Prim2 ("&&", _1, _3)            
                   )
# 89 "PlcParser.fsy"
                 : 'Expr));
# 675 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "PlcParser.fsy"
                                                                               Prim2 ("<", _1, _3)             
                   )
# 90 "PlcParser.fsy"
                 : 'Expr));
# 687 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "PlcParser.fsy"
                                                                               Prim2 ("<=", _1, _3)            
                   )
# 91 "PlcParser.fsy"
                 : 'Expr));
# 699 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "PlcParser.fsy"
                                                                               Prim2 ("::", _1, _3)            
                   )
# 92 "PlcParser.fsy"
                 : 'Expr));
# 711 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "PlcParser.fsy"
                                                                               Prim2 (";", _1, _3)             
                   )
# 93 "PlcParser.fsy"
                 : 'Expr));
# 723 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "PlcParser.fsy"
                                                                               Sel (_1, _3)                    
                   )
# 94 "PlcParser.fsy"
                 : 'Expr));
# 735 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "PlcParser.fsy"
                                                                               _1                              
                   )
# 98 "PlcParser.fsy"
                 : 'LExpr));
# 746 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AppExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "PlcParser.fsy"
                                                                               _1                              
                   )
# 99 "PlcParser.fsy"
                 : 'LExpr));
# 757 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "PlcParser.fsy"
                                                                               If (_2, _4, _6)                 
                   )
# 100 "PlcParser.fsy"
                 : 'LExpr));
# 770 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "PlcParser.fsy"
                                                                               Prim1 ("!", _2)                 
                   )
# 101 "PlcParser.fsy"
                 : 'LExpr));
# 781 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "PlcParser.fsy"
                                                                               Prim1 ("-", _2)                 
                   )
# 102 "PlcParser.fsy"
                 : 'LExpr));
# 792 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "PlcParser.fsy"
                                                                               Prim1 ("hd", _2)                
                   )
# 103 "PlcParser.fsy"
                 : 'LExpr));
# 803 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 104 "PlcParser.fsy"
                                                                               Prim1 ("tl", _2)                
                   )
# 104 "PlcParser.fsy"
                 : 'LExpr));
# 814 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "PlcParser.fsy"
                                                                               Prim1 ("ise", _2)               
                   )
# 105 "PlcParser.fsy"
                 : 'LExpr));
# 825 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "PlcParser.fsy"
                                                                               Prim1 ("print", _2)             
                   )
# 106 "PlcParser.fsy"
                 : 'LExpr));
# 836 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "PlcParser.fsy"
                                                                               Prim2 ("+", _1, _3)             
                   )
# 107 "PlcParser.fsy"
                 : 'LExpr));
# 848 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "PlcParser.fsy"
                                                                               Prim2 ("-", _1, _3)             
                   )
# 108 "PlcParser.fsy"
                 : 'LExpr));
# 860 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "PlcParser.fsy"
                                                                               Prim2 ("*", _1, _3)             
                   )
# 109 "PlcParser.fsy"
                 : 'LExpr));
# 872 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "PlcParser.fsy"
                                                                               Prim2 ("/", _1, _3)             
                   )
# 110 "PlcParser.fsy"
                 : 'LExpr));
# 884 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "PlcParser.fsy"
                                                                               Prim2 ("=", _1, _3)             
                   )
# 111 "PlcParser.fsy"
                 : 'LExpr));
# 896 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "PlcParser.fsy"
                                                                               Prim2 ("!=", _1, _3)            
                   )
# 112 "PlcParser.fsy"
                 : 'LExpr));
# 908 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "PlcParser.fsy"
                                                                               Prim2 ("&&", _1, _3)            
                   )
# 113 "PlcParser.fsy"
                 : 'LExpr));
# 920 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "PlcParser.fsy"
                                                                               Prim2 ("<", _1, _3)             
                   )
# 114 "PlcParser.fsy"
                 : 'LExpr));
# 932 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "PlcParser.fsy"
                                                                               Prim2 ("<=", _1, _3)            
                   )
# 115 "PlcParser.fsy"
                 : 'LExpr));
# 944 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 116 "PlcParser.fsy"
                                                                               Prim2 ("::", _1, _3)            
                   )
# 116 "PlcParser.fsy"
                 : 'LExpr));
# 956 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "PlcParser.fsy"
                                                                               Sel (_1, _3)                    
                   )
# 117 "PlcParser.fsy"
                 : 'LExpr));
# 968 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Const)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "PlcParser.fsy"
                                                                               _1                              
                   )
# 120 "PlcParser.fsy"
                 : 'AtExpr));
# 979 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 121 "PlcParser.fsy"
                                                                               Var _1                          
                   )
# 121 "PlcParser.fsy"
                 : 'AtExpr));
# 990 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Prog)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "PlcParser.fsy"
                                                                               _2                              
                   )
# 122 "PlcParser.fsy"
                 : 'AtExpr));
# 1001 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "PlcParser.fsy"
                                                                               _2                              
                   )
# 123 "PlcParser.fsy"
                 : 'AtExpr));
# 1012 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Comps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "PlcParser.fsy"
                                                                               Tuple _2                        
                   )
# 124 "PlcParser.fsy"
                 : 'AtExpr));
# 1023 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Args)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 125 "PlcParser.fsy"
                                                                               makeAnon _2 _4                  
                   )
# 125 "PlcParser.fsy"
                 : 'AtExpr));
# 1035 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "PlcParser.fsy"
                                                                               Call (_1, _2)                   
                   )
# 128 "PlcParser.fsy"
                 : 'AppExpr));
# 1047 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AppExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "PlcParser.fsy"
                                                                               Call (_1, _2)                   
                   )
# 129 "PlcParser.fsy"
                 : 'AppExpr));
# 1059 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : bool)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 132 "PlcParser.fsy"
                                                                               ConB _1                         
                   )
# 132 "PlcParser.fsy"
                 : 'Const));
# 1070 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "PlcParser.fsy"
                                                                               ConI _1                         
                   )
# 133 "PlcParser.fsy"
                 : 'Const));
# 1081 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "PlcParser.fsy"
                                                                               Tuple []                        
                   )
# 134 "PlcParser.fsy"
                 : 'Const));
# 1091 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'ListComps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "PlcParser.fsy"
                                                                               _2                              
                   )
# 135 "PlcParser.fsy"
                 : 'Const));
# 1102 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "PlcParser.fsy"
                                                                               EList _5                        
                   )
# 136 "PlcParser.fsy"
                 : 'Const));
# 1113 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "PlcParser.fsy"
                                                                               Prim2("::", _1, makeListType _1)
                   )
# 139 "PlcParser.fsy"
                 : 'ListComps));
# 1124 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'LExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'ListComps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "PlcParser.fsy"
                                                                               Prim2("::", _1, _3)             
                   )
# 140 "PlcParser.fsy"
                 : 'ListComps));
# 1136 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "PlcParser.fsy"
                                                                               [_1 ; _3]                       
                   )
# 143 "PlcParser.fsy"
                 : 'Comps));
# 1148 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Comps)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "PlcParser.fsy"
                                                                               _1 :: _3                        
                   )
# 144 "PlcParser.fsy"
                 : 'Comps));
# 1160 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "PlcParser.fsy"
                                                                               []                              
                   )
# 147 "PlcParser.fsy"
                 : 'Args));
# 1170 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "PlcParser.fsy"
                                                                               _2                              
                   )
# 148 "PlcParser.fsy"
                 : 'Args));
# 1181 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypedVar)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "PlcParser.fsy"
                                                                               [_1]                            
                   )
# 151 "PlcParser.fsy"
                 : 'Params));
# 1192 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'TypedVar)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Params)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "PlcParser.fsy"
                                                                                _1 :: _3                       
                   )
# 152 "PlcParser.fsy"
                 : 'Params));
# 1204 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 155 "PlcParser.fsy"
                                                                               (_1, _3)                        
                   )
# 155 "PlcParser.fsy"
                 : 'TypedVar));
# 1216 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'AtType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "PlcParser.fsy"
                                                                               _1                              
                   )
# 158 "PlcParser.fsy"
                 : 'Type));
# 1227 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Types)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "PlcParser.fsy"
                                                                               TupT _3                         
                   )
# 159 "PlcParser.fsy"
                 : 'Type));
# 1238 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "PlcParser.fsy"
                                                                               LisT _3                         
                   )
# 160 "PlcParser.fsy"
                 : 'Type));
# 1249 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "PlcParser.fsy"
                                                                               FunT (_1, _3)                   
                   )
# 161 "PlcParser.fsy"
                 : 'Type));
# 1261 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "PlcParser.fsy"
                                                                               TupT []                         
                   )
# 164 "PlcParser.fsy"
                 : 'AtType));
# 1271 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "PlcParser.fsy"
                                                                               BooT                            
                   )
# 165 "PlcParser.fsy"
                 : 'AtType));
# 1281 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "PlcParser.fsy"
                                                                               IntT                            
                   )
# 166 "PlcParser.fsy"
                 : 'AtType));
# 1291 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "PlcParser.fsy"
                                                                               _2                              
                   )
# 167 "PlcParser.fsy"
                 : 'AtType));
# 1302 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "PlcParser.fsy"
                                                                               [_1; _3]                        
                   )
# 170 "PlcParser.fsy"
                 : 'Types));
# 1314 "PlcParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'Type)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'Types)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 171 "PlcParser.fsy"
                                                                               _1 :: _3                        
                   )
# 171 "PlcParser.fsy"
                 : 'Types));
|]
# 1327 "PlcParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 47;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : Absyn.expr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
